using System.Collections.Generic;
using System.IO;

namespace NuGetDefenseTests;

public class VulnerabilityReportsTest
{
    private readonly ITestOutputHelper _testOutputHelper;

    public VulnerabilityReportsTest(ITestOutputHelper testOutputHelper)
    {
        _testOutputHelper = testOutputHelper;
    }

    [Fact]
    public void ReportVulnerabilityWithNullReferences()
    {
        var vulnDict = new Dictionary<string, Dictionary<string, Vulnerability>>
        {
            {
                "TestPkg", new Dictionary<string, Vulnerability>
                {
                    {
                        "CVE-Test", new Vulnerability(
                            "CVE-Test",
                            6.6,
                            "CWE-Test",
                            "Test Description",
                            null,
                            Vulnerability.AccessVectorType.NETWORK,
                            "Test Vendor"
                        )
                    }
                }
            }
        };

        var pkgs = new[] { new NuGetPackage { LineNumber = 1, Id = "TestPkg", Version = "1.0.1" } };

        var reporter = new VulnerabilityReporter();
        reporter.BuildVulnerabilityTextReport(vulnDict, pkgs, "NuGetDefense.dll", false, 0D, out var vulnNumber);
        Assert.Equal(0, vulnNumber);
        //TODO: Assert MSBuildMessages and VulnerabilityReport
    }

    [Fact]
    public void IgnoreVulnerabilitiesForPackage()
    {
        var pkgs = new[]
        {
            new NuGetPackage { LineNumber = 1, Id = "TestPkg", Version = "1.0.1" },
            new NuGetPackage { LineNumber = 2, Id = "TestPkg2", Version = "22.32.255" },
            new NuGetPackage { LineNumber = 3, Id = "TestPkg3", Version = "22.32.250" },
            new NuGetPackage { LineNumber = 4, Id = "TestPkg4", Version = "22.32.250" }
        };

        var ignorePkgs = new[]
        {
            new NuGetPackage { LineNumber = 1, Id = "TestPkg", Version = "1.0.2" },
            new NuGetPackage { LineNumber = 2, Id = "TestPkg2", Version = "22.32.255" },
            new NuGetPackage { LineNumber = 3, Id = "TestPkg3", Version = "" },
            new NuGetPackage { LineNumber = 4, Id = "TestPkg4", Version = null }
        };

        IgnorePackages(in pkgs, ignorePkgs, out pkgs);
        Assert.True(pkgs.Length == 1);
        Assert.True(pkgs[0].Id == "TestPkg");
        Assert.True(pkgs[0].Version == "1.0.1");
        Assert.True(pkgs[0].LineNumber == 1);
    }

    [Fact]
    public void RunTwice()
    {
        var options = new ScanOptions()
        {
            ProjectFile = new FileInfo("./TestFiles/test.csproj"),
            CheckTransitiveDependencies = true,
            WarnOnly = false,    
        };
        var scanner = new Scanner();
        var retVal = scanner.Scan(options);
        Assert.Equal(4, retVal);
        _testOutputHelper.WriteLine($"depcheck returned {retVal}");
        
        retVal = scanner.Scan(options);        
        Assert.Equal(4, retVal);
    }
    
    //{"pkg:nuget/jQuery@3.3.1":{"CVE-2019-11358":{},"CVE-2020-11023":{},"CVE-2020-23064":{}},"pkg:nuget/jQuery.Validation@1.17.0":{"CVE-2021-43306":{}}}
}