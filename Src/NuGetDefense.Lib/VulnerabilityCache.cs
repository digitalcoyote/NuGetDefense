using System;
using System.Collections.Generic;
using System.IO;
using NuGetDefense.Core;

namespace NuGetDefense;

public class VulnerabilityCache
{
    public delegate List<NuGetPackage> GetUncachedPackagesFunc(
        string path,
        IEnumerable<NuGetPackage> pkgs,
        TimeSpan maxAge,
        out NuGetPackage[] cachedPackages);

    /// <summary>
    ///     Retrieves packages for which the cache for this source does not exist or is expired
    /// </summary>
    public GetUncachedPackagesFunc? GetUncachedPackages { get; init; }

    /// <summary>
    ///     Gets the cached vulnerabilities for a package that came from a specific source
    /// </summary>
    public Func<string, NuGetPackage, string, Dictionary<string, Dictionary<string, Vulnerability>>, Dictionary<string, Dictionary<string, Vulnerability>>>?
        GetPackageCachedVulnerabilitiesForSource { get; init; }


    /// <summary>
    ///     Records new cache entries for this package and source
    /// </summary>
    public Action<string, Dictionary<string, Dictionary<string, Vulnerability>>, string>? UpdateCache { get; init; }

    public static SqlLiteVulnerabilityCache GetSqliteCache(string? path)
    {
        var cachePath = path ?? Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), ".nugetDefense", "NuGetDefense.sqlite");
        var cacheFolder = Path.GetDirectoryName(cachePath);

        if (!Directory.Exists(cacheFolder)) Directory.CreateDirectory(Path.GetDirectoryName(cachePath)!);
        if (!File.Exists(cachePath)) SqlLiteVulnerabilityCache.CreateNewSqlLiteCache(cachePath);

        return new(cachePath);
    }
}